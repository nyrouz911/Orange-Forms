pipeline {
  agent any
  options {
    timestamps()
    buildDiscarder(logRotator(numToKeepStr: '20'))
    skipStagesAfterUnstable()
  }

  parameters {
    booleanParam(name: 'DEPLOY_TO_PROD', defaultValue: false, description: 'Trigger Vercel Production deploy')
  }
  environment {
    CI = 'true'
    NEXT_TELEMETRY_DISABLED = '1'
    EMAIL_TO = 'nayrouz.tebib@esprit.tn'
  }
  stages {
    stage('Checkout') {
      steps {
        cleanWs()
        git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/nyrouz911/Orange-Forms.git'
      }
    }
    stage('Install / Lint / Typecheck / Test / Build') {
      steps {
        sh '''#!/usr/bin/env bash
          set -euxo pipefail
          if [ -f package-lock.json ]; then npm ci; elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm i --frozen-lockfile; else npm i; fi
          npm run lint --if-present
          npm run typecheck --if-present
          npm test --if-present -- --ci --reporters=jest-junit --coverage || true
          npm run build
        '''
      }
      post {
        always { junit allowEmptyResults: true, testResults: '**/junit*.xml, **/junit-report.xml' }
      }
    }
    stage('Trigger Vercel Prod') {
     when {
        allOf {
          anyOf {
            expression { return (env.BRANCH_NAME ?: '') == 'main' }
            expression { return (env.GIT_BRANCH ?: '').endsWith('/main') || (env.GIT_BRANCH ?: '') == 'main' }
          }
          expression { return params.DEPLOY_TO_PROD }
        }
      }
      steps {
        withCredentials([string(credentialsId: 'vercel-hook-url', variable: 'VERCEL_HOOK_URL')]) {
          sh '''#!/usr/bin/env bash
          set -euo pipefail
          if [[ -n "${VERCEL_HOOK_URL:-}" ]]; then
            curl -sS -X POST -d '{}' "$VERCEL_HOOK_URL" >/dev/null
          else
            echo "VERCEL_HOOK_URL not set; skipping."
          fi
          '''
        }
      }
    }
  }
  post {
    success { echo "✅ CI passed" }
    failure { echo "❌ CI failed" }
  }
}
